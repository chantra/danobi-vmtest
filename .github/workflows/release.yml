# This job listens for newly pushed tags. For each found tag, it will will
# do a static build, create a release, and upload said binary to the new
# release's assets.

name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  build-upload:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install required rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: x86_64-unknown-linux-gnu
        override: true

    - name: Build statically linked vmtest
      run: |
        function gnu_to_debian() {
          # Funtion to convert an architecture in Debian to its GNU equivalent,
          # e.g amd64 -> x86_64
          # CPUTABLE contains a list of debian_arch\tgnu_arch per line
          # Compare of the first field matches and print the second one.
          awk -v gnu_arch="$1" '$2 ~ gnu_arch {print $1}' /usr/share/dpkg/cputable
        }

        ARCHS=(x86_64 aarch64 s390x)

        for arch in "${ARCHS[@]}"; do
          # Install the required toolchain
          sudo apt install -y gcc-${arch//_/-}-linux-gnu
          rustup target add "${arch}-unknown-linux-gnu"
          # Compile the binary
          RUSTFLAGS="-C target-feature=+crt-static -C linker=/usr/bin/${arch}-linux-gnu-gcc" cargo build --release --target "${arch}-unknown-linux-gnu"
          cp "./target/${arch}-unknown-linux-gnu/release/vmtest" "./vmtest-$(gnu_to_debian "${arch}")"
        done

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        generate_release_notes: true
        files: ./vmtest-*
